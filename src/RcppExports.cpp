// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// predict_cpp
Eigen::VectorXd predict_cpp(Eigen::MatrixXd X, Eigen::VectorXd w, Eigen::MatrixXd V, Eigen::MatrixXd XV, bool fit_interactions);
RcppExport SEXP _survivalfm_predict_cpp(SEXP XSEXP, SEXP wSEXP, SEXP VSEXP, SEXP XVSEXP, SEXP fit_interactionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type w(wSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type XV(XVSEXP);
    Rcpp::traits::input_parameter< bool >::type fit_interactions(fit_interactionsSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_cpp(X, w, V, XV, fit_interactions));
    return rcpp_result_gen;
END_RCPP
}
// negative_log_likelihood
double negative_log_likelihood(const Eigen::VectorXd& linear_predictors, const Eigen::VectorXi& status, const Eigen::VectorXd& time);
RcppExport SEXP _survivalfm_negative_log_likelihood(SEXP linear_predictorsSEXP, SEXP statusSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type linear_predictors(linear_predictorsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(negative_log_likelihood(linear_predictors, status, time));
    return rcpp_result_gen;
END_RCPP
}
// regularized_negative_log_likelihood
double regularized_negative_log_likelihood(const Eigen::VectorXi status, const Eigen::VectorXd time, const Eigen::VectorXd lp, const Eigen::VectorXd cumsum_exp_lp, const Eigen::MatrixXd V, const Eigen::VectorXd w, double lambda1, double lambda2, bool fit_interactions);
RcppExport SEXP _survivalfm_regularized_negative_log_likelihood(SEXP statusSEXP, SEXP timeSEXP, SEXP lpSEXP, SEXP cumsum_exp_lpSEXP, SEXP VSEXP, SEXP wSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP fit_interactionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type lp(lpSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type cumsum_exp_lp(cumsum_exp_lpSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< bool >::type fit_interactions(fit_interactionsSEXP);
    rcpp_result_gen = Rcpp::wrap(regularized_negative_log_likelihood(status, time, lp, cumsum_exp_lp, V, w, lambda1, lambda2, fit_interactions));
    return rcpp_result_gen;
END_RCPP
}
// shared_computations
Rcpp::List shared_computations(const Eigen::MatrixXd& X, const Eigen::VectorXd& w, const Eigen::MatrixXd& V, bool fit_interactions);
RcppExport SEXP _survivalfm_shared_computations(SEXP XSEXP, SEXP wSEXP, SEXP VSEXP, SEXP fit_interactionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type V(VSEXP);
    Rcpp::traits::input_parameter< bool >::type fit_interactions(fit_interactionsSEXP);
    rcpp_result_gen = Rcpp::wrap(shared_computations(X, w, V, fit_interactions));
    return rcpp_result_gen;
END_RCPP
}
// compute_gradients
Rcpp::List compute_gradients(Eigen::MatrixXd X, Eigen::VectorXi status, Eigen::VectorXd time, Eigen::MatrixXd V, Eigen::VectorXd w, Eigen::MatrixXd& XV, Eigen::VectorXd& exp_lp, Eigen::VectorXd& cumsum_exp_lp, double lambda1, double lambda2, bool fit_interactions);
RcppExport SEXP _survivalfm_compute_gradients(SEXP XSEXP, SEXP statusSEXP, SEXP timeSEXP, SEXP VSEXP, SEXP wSEXP, SEXP XVSEXP, SEXP exp_lpSEXP, SEXP cumsum_exp_lpSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP fit_interactionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type status(statusSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type time(timeSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type w(wSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type XV(XVSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type exp_lp(exp_lpSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type cumsum_exp_lp(cumsum_exp_lpSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< bool >::type fit_interactions(fit_interactionsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gradients(X, status, time, V, w, XV, exp_lp, cumsum_exp_lp, lambda1, lambda2, fit_interactions));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_survivalfm_predict_cpp", (DL_FUNC) &_survivalfm_predict_cpp, 5},
    {"_survivalfm_negative_log_likelihood", (DL_FUNC) &_survivalfm_negative_log_likelihood, 3},
    {"_survivalfm_regularized_negative_log_likelihood", (DL_FUNC) &_survivalfm_regularized_negative_log_likelihood, 9},
    {"_survivalfm_shared_computations", (DL_FUNC) &_survivalfm_shared_computations, 4},
    {"_survivalfm_compute_gradients", (DL_FUNC) &_survivalfm_compute_gradients, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_survivalfm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
